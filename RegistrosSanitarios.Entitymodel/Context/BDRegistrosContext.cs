using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using RegistrosSanitarios.EntityModel.Models;

namespace RegistrosSanitarios.EntityModel.Context
{
    public partial class BDRegistrosSanitariosContext : DbContext
    {
        public BDRegistrosSanitariosContext()
            : base()
        {
        }

        public BDRegistrosSanitariosContext(DbContextOptions<BDRegistrosSanitariosContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ArchivosDatosANMAT> ArchivosDatosANMAT { get; set; }
        public virtual DbSet<ArchivosProductosRegistrosSanit> ArchivosProductosRegistrosSanit { get; set; }
        public virtual DbSet<ArchivosRegistrosSanit> ArchivosRegistrosSanit { get; set; }
        public virtual DbSet<CambiosPorCircuito> CambiosPorCircuito { get; set; }
        public virtual DbSet<Circuitos> Circuitos { get; set; }
        public virtual DbSet<Concentraciones> Concentraciones { get; set; }
        public virtual DbSet<CondicionesConservacion> CondicionesConservacion { get; set; }
        public virtual DbSet<CondicionesExpendios> CondicionesExpendios { get; set; }
        public virtual DbSet<DatosANMAT> DatosANMAT { get; set; }
        public virtual DbSet<EnvasesPrimarios> EnvasesPrimarios { get; set; }
        public virtual DbSet<EstadosCambiosPorCircuito> EstadosCambiosPorCircuito { get; set; }
        public virtual DbSet<EstadosCircuitos> EstadosCircuitos { get; set; }
        public virtual DbSet<EstadosProductosRegistrosSanit> EstadosProductosRegistrosSanit { get; set; }
        public virtual DbSet<EstadosRegistrosSanitarios> EstadosRegistrosSanitarios { get; set; }
        public virtual DbSet<Excipientes> Excipientes { get; set; }
        public virtual DbSet<ExcipientesProductos> ExcipientesProductos { get; set; }
        public virtual DbSet<FormasFarmaceuticas> FormasFarmaceuticas { get; set; }
        public virtual DbSet<Indicaciones> Indicaciones { get; set; }
        public virtual DbSet<IndicacionesProductos> IndicacionesProductos { get; set; }
        public virtual DbSet<LineasTerapeuticas> LineasTerapeuticas { get; set; }
        public virtual DbSet<Materiales> Materiales { get; set; }
        public virtual DbSet<Presentaciones> Presentaciones { get; set; }
        public virtual DbSet<PrincipiosActivos> PrincipiosActivos { get; set; }
        public virtual DbSet<PrincipiosActivosRegistrosSanit> PrincipiosActivosRegistrosSanit { get; set; }
        public virtual DbSet<ProductosRegistrosSanit> ProductosRegistrosSanit { get; set; }
        public virtual DbSet<TareasProductosRegistrosSanit> TareasProductosRegistrosSanit { get; set; }
        public virtual DbSet<TareasRegistrosSanitarios> TareasRegistrosSanitarios { get; set; }
        public virtual DbSet<TiposCircuitos> TiposCircuitos { get; set; }
        public virtual DbSet<TiposEnvases> TiposEnvases { get; set; }
        public virtual DbSet<ValoresConcentracion> ValoresConcentracion { get; set; }

        public virtual DbSet<RelacionHijoPadre> RelacionHijoPadres { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RelacionHijoPadre>(entity => entity.HasKey(e => new { e.UsuarioADHijo, e.UsuarioADPadre }));

            modelBuilder.Entity<ArchivosDatosANMAT>(entity =>
            {
                entity.ToTable("archivosDatosANMAT"); entity.HasKey(e => e.IdarchivosDatosANMAT); entity.Property(e => e.IdarchivosDatosANMAT).HasColumnName("idarchivosDatosANMAT").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdDatosANMAT).HasColumnName("idDatosANMAT").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Archivo).HasColumnName("archivo").HasMaxLength(300).IsUnicode(false).IsRequired(false); entity.Property(e => e.UsuarioAlta).HasColumnName("usuarioAlta").HasMaxLength(50).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaAlta).HasColumnName("fechaAlta").HasMaxLength(8).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdDatosANMATNavigation).WithMany(p => p.ArchivosDatosANMAT).HasForeignKey(d => d.IdDatosANMAT).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_archivosDatosANMAT_datosANMAT");
            });

            modelBuilder.Entity<ArchivosProductosRegistrosSanit>(entity => { entity.ToTable("archivosProductosRegistrosSanit"); entity.HasKey(e => e.IdArchivosProductosRegistrosSanit); entity.Property(e => e.IdArchivosProductosRegistrosSanit).HasColumnName("idArchivosProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdProductosRegistrosSanit).HasColumnName("idProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Archivo).HasColumnName("archivo").HasMaxLength(300).IsUnicode(false).IsRequired(false); entity.Property(e => e.UsuarioAlta).HasColumnName("usuarioAlta").HasMaxLength(50).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaAlta).HasColumnName("fechaAlta").HasMaxLength(8).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdProductosRegistrosSanitNavigation).WithMany(p => p.ArchivosProductosRegistrosSanit).HasForeignKey(d => d.IdProductosRegistrosSanit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_archivosProductosRegistrosSanit_productosRegistrosSanit"); });

            modelBuilder.Entity<ArchivosRegistrosSanit>(entity => { entity.ToTable("archivosRegistrosSanit"); entity.HasKey(e => e.IdArchivosRegistrosSanit); entity.Property(e => e.IdArchivosRegistrosSanit).HasColumnName("idArchivosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdRegistrosSanitarios).HasColumnName("idRegistrosSanitarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Archivo).HasColumnName("archivo").HasMaxLength(300).IsUnicode(false).IsRequired(false); entity.Property(e => e.UsuarioAlta).HasColumnName("usuarioAlta").HasMaxLength(50).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaAlta).HasColumnName("fechaAlta").HasMaxLength(8).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<Concentraciones>(entity => { entity.ToTable("concentraciones"); entity.HasKey(e => e.IdConcentraciones); entity.Property(e => e.IdConcentraciones).HasColumnName("idConcentraciones").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(255).IsUnicode(false).IsRequired(true); });

            modelBuilder.Entity<CondicionesConservacion>(entity => { entity.ToTable("condicionesConservacion"); entity.HasKey(e => e.IdCondicionesConservacion); entity.Property(e => e.IdCondicionesConservacion).HasColumnName("idCondicionesConservacion").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(true); });

            modelBuilder.Entity<CondicionesExpendios>(entity => { entity.ToTable("condicionesExpendios"); entity.HasKey(e => e.IdCondicionesExpendios); entity.Property(e => e.IdCondicionesExpendios).HasColumnName("idCondicionesExpendios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(300).IsUnicode(false).IsRequired(true); });

            modelBuilder.Entity<CambiosPorCircuito>(entity => { entity.ToTable("cambiosPorCircuito"); entity.HasKey(e => e.IdCambiosPorCircuito); entity.Property(e => e.IdCambiosPorCircuito).HasColumnName("idCambiosPorCircuito").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdCircuitos).HasColumnName("idCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdProductosRegistrosSanit).HasColumnName("idProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(true); entity.Property(e => e.IdIndicacionesProductos).HasColumnName("idIndicacionesProductos").HasMaxLength(4).IsUnicode(false).IsRequired(true); entity.Property(e => e.IdexcipientesProductos).HasColumnName("idexcipientesProductos").HasMaxLength(4).IsUnicode(false).IsRequired(true); entity.Property(e => e.IdConcentraciones).HasColumnName("idConcentraciones").HasMaxLength(4).IsUnicode(false).IsRequired(true); entity.Property(e => e.NombreCampo).HasColumnName("nombreCampo").HasMaxLength(50).IsUnicode(false).IsRequired(false); entity.Property(e => e.ValorActual).HasColumnName("valorActual").HasMaxLength(1000).IsUnicode(false).IsRequired(false); entity.Property(e => e.ValorActualizado).HasColumnName("valorActualizado").HasMaxLength(1000).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdEstadosCambiosPorCircuito).HasColumnName("idEstadosCambiosPorCircuito").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaSolicitudCambio).HasColumnName("fechaSolicitudCambio").HasMaxLength(8).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaAplicacionCambio).HasColumnName("fechaAplicacionCambio").HasMaxLength(8).IsUnicode(false).IsRequired(true); entity.HasOne(d => d.IdEstadosCambiosPorCircuitoNavigation).WithMany(p => p.CambiosPorCircuito).HasForeignKey(d => d.IdEstadosCambiosPorCircuito).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_cambiosPorCircuito_estadosCambiosPorCircuito"); entity.HasOne(d => d.IdCircuitosNavigation).WithMany(p => p.CambiosPorCircuito).HasForeignKey(d => d.IdCircuitos).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_circuitos_cambiosPorCircuito"); });

            modelBuilder.Entity<Circuitos>(entity => { entity.ToTable("circuitos"); entity.HasKey(e => e.IdCircuitos); entity.Property(e => e.IdCircuitos).HasColumnName("idCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdRegistrosSanitarios).HasColumnName("idRegistrosSanitarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdDatosANMAT).HasColumnName("idDatosANMAT").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdtiposCircuitos).HasColumnName("idtiposCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaInicio).HasColumnName("fechaInicio").HasMaxLength(8).IsUnicode(false).IsRequired(false); entity.Property(e => e.UsuarioInicio).HasColumnName("usuarioInicio").HasMaxLength(50).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdestadosCircuitos).HasColumnName("idestadosCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdDatosANMATNavigation).WithMany(p => p.Circuitos).HasForeignKey(d => d.IdDatosANMAT).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FKcircuitos294639"); entity.HasOne(d => d.IdestadosCircuitosNavigation).WithMany(p => p.Circuitos).HasForeignKey(d => d.IdestadosCircuitos).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_circuitos_estadosCircuitos"); entity.HasOne(d => d.IdtiposCircuitosNavigation).WithMany(p => p.Circuitos).HasForeignKey(d => d.IdtiposCircuitos).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_tiposCircuitos_circuitos"); });

            modelBuilder.Entity<EnvasesPrimarios>(entity => { entity.ToTable("envasesPrimarios"); entity.HasKey(e => e.IdEnvasesPrimarios); entity.Property(e => e.IdEnvasesPrimarios).HasColumnName("idEnvasesPrimarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdMateriales).HasColumnName("idMateriales").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdTipoEnvases).HasColumnName("idTipoEnvases").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdMaterialesNavigation).WithMany(p => p.EnvasesPrimarios).HasForeignKey(d => d.IdMateriales).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_envasesPrimarios_materiales"); entity.HasOne(d => d.IdTipoEnvasesNavigation).WithMany(p => p.EnvasesPrimarios).HasForeignKey(d => d.IdTipoEnvases).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_envasesPrimarios_tiposEnvases"); });

            modelBuilder.Entity<DatosANMAT>(entity => { entity.ToTable("datosANMAT"); entity.HasKey(e => e.IdDatosANMAT); entity.Property(e => e.IdDatosANMAT).HasColumnName("idDatosANMAT").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.NroExpedienteEnvio).HasColumnName("nroExpedienteEnvio").HasMaxLength(30).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaPresentacionEnvio).HasColumnName("fechaPresentacionEnvio").HasMaxLength(8).IsUnicode(false).IsRequired(false); entity.Property(e => e.NroDisposicionrespuesta).HasColumnName("nroDisposicionrespuesta").HasMaxLength(30).IsUnicode(false).IsRequired(true); entity.Property(e => e.FechaDisposicionRespuesta).HasColumnName("fechaDisposicionRespuesta").HasMaxLength(8).IsUnicode(false).IsRequired(true); entity.Property(e => e.UsuarioRegistros).HasColumnName("usuarioRegistros").HasMaxLength(50).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaRegistro).HasColumnName("fechaRegistro").HasMaxLength(8).IsUnicode(false).IsRequired(false); entity.Property(e => e.UsuarioActualizacion).HasColumnName("usuarioActualizacion").HasMaxLength(50).IsUnicode(false).IsRequired(true); entity.Property(e => e.FechaActualizacion).HasColumnName("fechaActualizacion").HasMaxLength(8).IsUnicode(false).IsRequired(true); });

            modelBuilder.Entity<EstadosCambiosPorCircuito>(entity => { entity.ToTable("estadosCambiosPorCircuito"); entity.HasKey(e => e.IdEstadosCambiosPorCircuito); entity.Property(e => e.IdEstadosCambiosPorCircuito).HasColumnName("idEstadosCambiosPorCircuito").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<EstadosCircuitos>(entity => { entity.ToTable("estadosCircuitos"); entity.HasKey(e => e.IdestadosCircuitos); entity.Property(e => e.IdestadosCircuitos).HasColumnName("idestadosCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<EstadosProductosRegistrosSanit>(entity => { entity.ToTable("estadosProductosRegistrosSanit"); entity.HasKey(e => e.IdEstadosProductosRegistrosSanit); entity.Property(e => e.IdEstadosProductosRegistrosSanit).HasColumnName("idEstadosProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<EstadosRegistrosSanitarios>(entity => { entity.ToTable("estadosRegistrosSanitarios"); entity.HasKey(e => e.IdEstadosRegistrosSanitarios); entity.Property(e => e.IdEstadosRegistrosSanitarios).HasColumnName("idEstadosRegistrosSanitarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(true); });

            modelBuilder.Entity<Excipientes>(entity => { entity.ToTable("excipientes"); entity.HasKey(e => e.IdExcipientes); entity.Property(e => e.IdExcipientes).HasColumnName("idExcipientes").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<ExcipientesProductos>(entity => { entity.ToTable("excipientesProductos"); entity.HasKey(e => e.IdExcipientesProductos); entity.Property(e => e.IdExcipientesProductos).HasColumnName("idExcipientesProductos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdExcipientes).HasColumnName("idExcipientes").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdProductosRegistrosSanit).HasColumnName("idProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdExcipientesNavigation).WithMany(p => p.ExcipientesProductos).HasForeignKey(d => d.IdExcipientes).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_excipientesProductos_excipientes"); entity.HasOne(d => d.IdProductosRegistrosSanitNavigation).WithMany(p => p.ExcipientesProductos).HasForeignKey(d => d.IdProductosRegistrosSanit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_excipientesProductos_productosRegistrosSanit"); });

            modelBuilder.Entity<FormasFarmaceuticas>(entity => { entity.ToTable("formasFarmaceuticas"); entity.HasKey(e => e.IdFormasFarmaceuticas); entity.Property(e => e.IdFormasFarmaceuticas).HasColumnName("idFormasFarmaceuticas").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<Indicaciones>(entity => { entity.ToTable("indicaciones"); entity.HasKey(e => e.IdIndicaciones); entity.Property(e => e.IdIndicaciones).HasColumnName("idIndicaciones").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(300).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<IndicacionesProductos>(entity => { entity.ToTable("indicacionesProductos"); entity.HasKey(e => e.IdIndicacionesProductos); entity.Property(e => e.IdIndicacionesProductos).HasColumnName("idIndicacionesProductos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdIndicaciones).HasColumnName("idIndicaciones").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdProductosRegistrosSanit).HasColumnName("idProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdIndicacionesNavigation).WithMany(p => p.IndicacionesProductos).HasForeignKey(d => d.IdIndicaciones).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_indicacionesProductos_indicaciones"); entity.HasOne(d => d.IdProductosRegistrosSanitNavigation).WithMany(p => p.IndicacionesProductos).HasForeignKey(d => d.IdProductosRegistrosSanit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_indicacionesProductos_productosRegistrosSanit"); });

            modelBuilder.Entity<LineasTerapeuticas>(entity => { entity.ToTable("lineasTerapeuticas"); entity.HasKey(e => e.IdLineasTerapeuticas); entity.Property(e => e.IdLineasTerapeuticas).HasColumnName("idLineasTerapeuticas").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<Materiales>(entity => { entity.ToTable("materiales"); entity.HasKey(e => e.IdMateriales); entity.Property(e => e.IdMateriales).HasColumnName("idMateriales").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<Presentaciones>(entity => { entity.ToTable("presentaciones"); entity.HasKey(e => e.IdPresentaciones); entity.Property(e => e.IdPresentaciones).HasColumnName("idPresentaciones").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<PrincipiosActivosRegistrosSanit>(entity => { entity.ToTable("principiosActivosRegistrosSanit"); entity.HasKey(e => e.IdPrincipiosActivosRegistrosSanit); entity.Property(e => e.IdPrincipiosActivosRegistrosSanit).HasColumnName("idPrincipiosActivosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdRegistrosSanitarios).HasColumnName("idRegistrosSanitarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdPrincipiosActivos).HasColumnName("idPrincipiosActivos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdPrincipiosActivosNavigation).WithMany(p => p.PrincipiosActivosRegistrosSanit).HasForeignKey(d => d.IdPrincipiosActivos).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_principiosActivosRegistrosSanit_principiosActivos"); });

            modelBuilder.Entity<PrincipiosActivos>(entity => { entity.ToTable("principiosActivos"); entity.HasKey(e => e.IdPrincipiosActivos); entity.Property(e => e.IdPrincipiosActivos).HasColumnName("idPrincipiosActivos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(255).IsUnicode(false).IsRequired(false); entity.Property(e => e.Estado).HasColumnName("estado").HasMaxLength(1).IsUnicode(false).IsRequired(false); entity.Property(e => e.DescripcionIngles).HasColumnName("descripcionIngles").HasMaxLength(255).IsUnicode(false).IsRequired(true); entity.Property(e => e.AplicacionId).HasColumnName("aplicacionId").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdPrincipiosActivosSitio).HasColumnName("idPrincipiosActivosSitio").HasMaxLength(4).IsUnicode(false).IsRequired(true); entity.Property(e => e.IdPrincipiosActivosANMAT).HasColumnName("idPrincipiosActivosANMAT").HasMaxLength(100).IsUnicode(false).IsRequired(true); });

            modelBuilder.Entity<TareasProductosRegistrosSanit>(entity => { entity.ToTable("tareasProductosRegistrosSanit"); entity.Property(e => e.IdTarea).HasColumnName("idTarea").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdProductosRegistrosSanit).HasColumnName("idProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdCircuitos).HasColumnName("idCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdCircuitosNavigation).WithMany(p => p.TareasProductosRegistrosSanit).HasForeignKey(d => d.IdCircuitos).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_tareasProductosRegistrosSanit_circuitos"); entity.HasOne(d => d.IdProductosRegistrosSanitNavigation).WithMany(p => p.TareasProductosRegistrosSanit).HasForeignKey(d => d.IdProductosRegistrosSanit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_tareasProductosRegistrosSanit_productosRegistrosSanit"); });

            modelBuilder.Entity<TareasRegistrosSanitarios>(entity => { entity.ToTable("tareasRegistrosSanitarios"); entity.Property(e => e.IdTarea).HasColumnName("idTarea").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdRegistrosSanitarios).HasColumnName("idRegistrosSanitarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdCircuitos).HasColumnName("idCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.HasOne(d => d.IdCircuitosNavigation).WithMany(p => p.TareasRegistrosSanitarios).HasForeignKey(d => d.IdCircuitos).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_tareasRegistrosSanitarios_circuitos"); });

            modelBuilder.Entity<TiposCircuitos>(entity => { entity.ToTable("tiposCircuitos"); entity.HasKey(e => e.IdtiposCircuitos); entity.Property(e => e.IdtiposCircuitos).HasColumnName("idtiposCircuitos").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<TiposEnvases>(entity => { entity.ToTable("tiposEnvases"); entity.HasKey(e => e.IdTipoEnvases); entity.Property(e => e.IdTipoEnvases).HasColumnName("idTipoEnvases").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Descripcion).HasColumnName("descripcion").HasMaxLength(100).IsUnicode(false).IsRequired(false); });

            modelBuilder.Entity<ProductosRegistrosSanit>(entity => { entity.ToTable("productosRegistrosSanit"); entity.HasKey(e => e.IdProductosRegistrosSanit); entity.Property(e => e.IdProductosRegistrosSanit).HasColumnName("idProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdRegistrosSanitarios).HasColumnName("idRegistrosSanitarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdFormasFarmaceuticas).HasColumnName("idFormasFarmaceuticas").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdPresentaciones).HasColumnName("idPresentaciones").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdConcentraciones).HasColumnName("idConcentraciones").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdEnvasesPrimarios).HasColumnName("idEnvasesPrimarios").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdCondicionesConservacion).HasColumnName("idCondicionesConservacion").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.CompCualicuantitativaExcipiente).HasColumnName("compCualicuantitativaExcipiente").HasMaxLength(500).IsUnicode(false).IsRequired(false); entity.Property(e => e.NroTroquelN).HasColumnName("nroTroquelN").HasMaxLength(4).IsUnicode(false).IsRequired(true); entity.Property(e => e.VidaUtil).HasColumnName("vidaUtil").HasMaxLength(30).IsUnicode(false).IsRequired(false); entity.Property(e => e.ContenidoEnvasePrimario).HasColumnName("contenidoEnvasePrimario").HasMaxLength(200).IsUnicode(false).IsRequired(false); entity.Property(e => e.ContenidoEnvaseSecundario).HasColumnName("contenidoEnvaseSecundario").HasMaxLength(200).IsUnicode(false).IsRequired(false); entity.Property(e => e.CondicionConservacionFormaReconstituida).HasColumnName("condicionConservacionFormaReconstituida").HasMaxLength(200).IsUnicode(false).IsRequired(false); entity.Property(e => e.SitioElaboracion).HasColumnName("sitioElaboracion").HasMaxLength(200).IsUnicode(false).IsRequired(false); entity.Property(e => e.SitioAcondicionamientoPrimario).HasColumnName("sitioAcondicionamientoPrimario").HasMaxLength(200).IsUnicode(false).IsRequired(false); entity.Property(e => e.SitioAcondicionamientoSecundario).HasColumnName("sitioAcondicionamientoSecundario").HasMaxLength(200).IsUnicode(false).IsRequired(false); entity.Property(e => e.IdTareaActual).HasColumnName("idTareaActual").HasMaxLength(4).IsUnicode(false).IsRequired(true); entity.Property(e => e.IdEstadosProductosRegistrosSanit).HasColumnName("idEstadosProductosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false); entity.Property(e => e.Estado).HasColumnName("estado").HasMaxLength(1).IsUnicode(false).IsRequired(true); entity.Property(e => e.UsuarioAlta).HasColumnName("usuarioAlta").HasMaxLength(50).IsUnicode(false).IsRequired(false); entity.Property(e => e.FechaAlta).HasColumnName("fechaAlta").HasMaxLength(8).IsUnicode(false).IsRequired(false); entity.Property(e => e.UsuarioActualizacion).HasColumnName("usuarioActualizacion").HasMaxLength(50).IsUnicode(false).IsRequired(true); entity.Property(e => e.FechaActualizacion).HasColumnName("fechaActualizacion").HasMaxLength(8).IsUnicode(false).IsRequired(true); entity.HasOne(d => d.IdConcentracionesNavigation).WithMany(p => p.ProductosRegistrosSanit).HasForeignKey(d => d.IdConcentraciones).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_productosRegistrosSanit_concentraciones"); entity.HasOne(d => d.IdCondicionesConservacionNavigation).WithMany(p => p.ProductosRegistrosSanit).HasForeignKey(d => d.IdCondicionesConservacion).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_productosRegistrosSanit_condicionesConservacion"); entity.HasOne(d => d.IdEnvasesPrimariosNavigation).WithMany(p => p.ProductosRegistrosSanit).HasForeignKey(d => d.IdEnvasesPrimarios).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_productosRegistrosSanit_envasesPrimarios"); entity.HasOne(d => d.IdEstadosProductosRegistrosSanitNavigation).WithMany(p => p.ProductosRegistrosSanit).HasForeignKey(d => d.IdEstadosProductosRegistrosSanit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_productosRegistrosSanit_estadosProductosRegistrosSanit"); entity.HasOne(d => d.IdFormasFarmaceuticasNavigation).WithMany(p => p.ProductosRegistrosSanit).HasForeignKey(d => d.IdFormasFarmaceuticas).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_productosRegistrosSanit_formasFarmaceuticas"); entity.HasOne(d => d.IdPresentacionesNavigation).WithMany(p => p.ProductosRegistrosSanit).HasForeignKey(d => d.IdPresentaciones).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_productosRegistrosSanit_presentaciones"); });

            modelBuilder.Entity<ValoresConcentracion>(entity =>
            {
                entity.ToTable("valoresConcentracion");
                entity.HasKey(e => e.IdvaloresConcentracion);
                entity.Property(e => e.IdvaloresConcentracion).HasColumnName("idvaloresConcentracion").HasMaxLength(4).IsUnicode(false).IsRequired(false);
                entity.Property(e => e.IdPrincipiosActivosRegistrosSanit).HasColumnName("idPrincipiosActivosRegistrosSanit").HasMaxLength(4).IsUnicode(false).IsRequired(false);
                entity.Property(e => e.IdConcentraciones).HasColumnName("idConcentraciones").HasMaxLength(4).IsUnicode(false).IsRequired(false);
                entity.Property(e => e.ValorConcentracion).HasColumnName("valorConcentracion").HasMaxLength(15).IsUnicode(false).IsRequired(false);

                entity.HasOne(d => d.IdConcentracionesNavigation).WithMany(p => p.ValoresConcentracion).HasForeignKey(d => d.IdConcentraciones).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_valoresConcentracion_concentraciones");
                entity.HasOne(d => d.IdPrincipiosActivosRegistrosSanitNavigation).WithMany(p => p.ValoresConcentracion).HasForeignKey(d => d.IdPrincipiosActivosRegistrosSanit).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_valoresConcentracion_principiosActivosRegistrosSanit");

            });


        }
    }
}
